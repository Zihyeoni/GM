# compatibility_calculator.py

from datetime import datetime

class CompatibilityCalculator:
    def calculate_compatibility(self, birthdate1, birthdate2):
        #생년월일을 받아 두 사람의 궁합 점수를 계산하고 설명을 제공합니다.
        score = self._calculate_score(birthdate1, birthdate2)
        description = self._get_description(score)
        return score, description

    def _calculate_score(self, birthdate1, birthdate2):
        #생년월일을 기반으로 궁합 점수를 계산합니다.
        zodiac1 = self._calculate_zodiac(birthdate1)
        zodiac2 = self._calculate_zodiac(birthdate2)
        
        zodiac_score = self._calculate_zodiac_score(zodiac1, zodiac2)
        
        return zodiac_score

    def _calculate_zodiac(self, birthdate):
        #생년월일을 12간지로 변환합니다.
        zodiacs = [
            "쥐", "소", "호랑이", "토끼", "용", "뱀", "말", "양", "원숭이", "닭", "개", "돼지"
        ]
        
        year = int(birthdate.split('-')[0])
        zodiac = zodiacs[year % 12]
        return zodiac

    def _calculate_zodiac_score(self, zodiac1, zodiac2):
        #12간지를 기반으로 궁합 점수를 계산합니다.
        compatibility_chart = {
            ("쥐", "쥐"): 90, ("쥐", "소"): 85, ("쥐", "호랑이"): 80, ("쥐", "토끼"): 75, 
            ("쥐", "용"): 95, ("쥐", "뱀"): 70, ("쥐", "말"): 60, ("쥐", "양"): 65, 
            ("쥐", "원숭이"): 85, ("쥐", "닭"): 75, ("쥐", "개"): 65, ("쥐", "돼지"): 70,
            ("소", "쥐"): 85, ("소", "소"): 90, ("소", "호랑이"): 75, ("소", "토끼"): 80, 
            ("소", "용"): 70, ("소", "뱀"): 95, ("소", "말"): 65, ("소", "양"): 60, 
            ("소", "원숭이"): 70, ("소", "닭"): 85, ("소", "개"): 75, ("소", "돼지"): 65,
            ("호랑이", "쥐"): 80, ("호랑이", "소"): 75, ("호랑이", "호랑이"): 90, ("호랑이", "토끼"): 85, 
            ("호랑이", "용"): 80, ("호랑이", "뱀"): 65, ("호랑이", "말"): 95, ("호랑이", "양"): 70, 
            ("호랑이", "원숭이"): 75, ("호랑이", "닭"): 60, ("호랑이", "개"): 85, ("호랑이", "돼지"): 75,
            ("토끼", "쥐"): 75, ("토끼", "소"): 80, ("토끼", "호랑이"): 85, ("토끼", "토끼"): 90, 
            ("토끼", "용"): 70, ("토끼", "뱀"): 65, ("토끼", "말"): 60, ("토끼", "양"): 95, 
            ("토끼", "원숭이"): 70, ("토끼", "닭"): 65, ("토끼", "개"): 85, ("토끼", "돼지"): 80,
            ("용", "쥐"): 95, ("용", "소"): 70, ("용", "호랑이"): 80, ("용", "토끼"): 70, 
            ("용", "용"): 90, ("용", "뱀"): 85, ("용", "말"): 75, ("용", "양"): 60, 
            ("용", "원숭이"): 95, ("용", "닭"): 85, ("용", "개"): 65, ("용", "돼지"): 75,
            ("뱀", "쥐"): 70, ("뱀", "소"): 95, ("뱀", "호랑이"): 65, ("뱀", "토끼"): 65, 
            ("뱀", "용"): 85, ("뱀", "뱀"): 90, ("뱀", "말"): 60, ("뱀", "양"): 75, 
            ("뱀", "원숭이"): 80, ("뱀", "닭"): 95, ("뱀", "개"): 70, ("뱀", "돼지"): 60,
            ("말", "쥐"): 60, ("말", "소"): 65, ("말", "호랑이"): 95, ("말", "토끼"): 60, 
            ("말", "용"): 75, ("말", "뱀"): 60, ("말", "말"): 90, ("말", "양"): 85, 
            ("말", "원숭이"): 70, ("말", "닭"): 65, ("말", "개"): 80, ("말", "돼지"): 75,
            ("양", "쥐"): 65, ("양", "소"): 60, ("양", "호랑이"): 70, ("양", "토끼"): 95, 
            ("양", "용"): 60, ("양", "뱀"): 75, ("양", "말"): 85, ("양", "양"): 90, 
            ("양", "원숭이"): 70, ("양", "닭"): 65, ("양", "개"): 75, ("양", "돼지"): 80,
            ("원숭이", "쥐"): 85, ("원숭이", "소"): 70, ("원숭이", "호랑이"): 75, ("원숭이", "토끼"): 70, 
            ("원숭이", "용"): 95, ("원숭이", "뱀"): 80, ("원숭이", "말"): 70, ("원숭이", "양"): 70, 
            ("원숭이", "원숭이"): 90, ("원숭이", "닭"): 85, ("원숭이", "개"): 60, ("원숭이", "돼지"): 65,
            ("닭", "쥐"): 75, ("닭", "소"): 85, ("닭", "호랑이"): 60, ("닭", "토끼"): 65, 
            ("닭", "용"): 85, ("닭", "뱀"): 95, ("닭", "말"): 65, ("닭", "양"): 65, 
            ("닭", "원숭이"): 85, ("닭", "닭"): 90, ("닭", "개"): 75, ("닭", "돼지"): 70,
            ("개", "쥐"): 65, ("개", "소"): 75, ("개", "호랑이"): 85, ("개", "토끼"): 85, 
            ("개", "용"): 65, ("개", "뱀"): 70, ("개", "말"): 80, ("개", "양"): 75, 
            ("개", "원숭이"): 60, ("개", "닭"): 75, ("개", "개"): 90, ("개", "돼지"): 85,
            ("돼지", "쥐"): 70, ("돼지", "소"): 65, ("돼지", "호랑이"): 75, ("돼지", "토끼"): 80, 
            ("돼지", "용"): 75, ("돼지", "뱀"): 60, ("돼지", "말"): 75, ("돼지", "양"): 80, 
            ("돼지", "원숭이"): 65, ("돼지", "닭"): 70, ("돼지", "개"): 85, ("돼지", "돼지"): 90
        }

        score = compatibility_chart.get((zodiac1, zodiac2), 50)  # 일치하는 조합이 없으면 기본 점수 50
        return score

    def _get_description(self, score):
        #궁합 점수에 따른 설명을 반환합니다.
        if score > 90:
            return ("완벽한 궁합! 두 분은 서로에게 아주 잘 맞는 사람들입니다. "
                    "함께 있을 때 서로의 단점을 보완해 주며, 큰 어려움 없이 서로를 이해하고 사랑합니다.")
        elif score > 75:
            return ("매우 좋은 궁합입니다. 서로 이해하고 존중하는 관계를 유지하세요. "
                    "약간의 의견 차이가 있을 수 있지만, 이를 통해 더욱 단단한 관계로 발전할 수 있습니다.")
        elif score > 50:
            return ("좋은 궁합입니다. 다소 의견 차이가 있을 수 있지만, 노력으로 극복할 수 있습니다. "
                    "서로의 차이를 인정하고 배려하는 마음이 필요합니다.")
        elif score > 25:
            return ("보통 궁합입니다. 서로 더 많은 이해와 노력이 필요할 수 있습니다. "
                    "때로는 갈등이 있을 수 있지만, 대화와 이해를 통해 문제를 해결할 수 있습니다.")
        else:
            return ("궁합이 좋지 않습니다. 서로 다른 점을 이해하고 배려하는 것이 중요합니다. "
                    "상대방의 입장을 이해하고, 양보와 타협을 통해 관계를 개선할 수 있습니다.")